①各オブジェクトが追うべき責務を考え、「属性」「操作」の種類と内容を定義する。
②各オブジェクトを仮想世界に生み出し、動かす。

①オブジェクトを定義して、②オブジェクトを生成する。は間違い。
→Javaでは仮想世界の中で動くオブジェクトそのものを開発者が直接定義することは許されない。
　⇒「オブジェクトが生み出される際に用いられる、オブジェクトの設計図」であるクラスを定義する。
　
⇨①クラスを定義して、②そのクラスに基づいてオブジェクトを生成する。が正しい。

「クラス定義→オブジェクト生成」方式のメリット
・クラスを作っておけば、そこから何個でも同じ属性のオブジェクトを作成できる　☜金型のような認識


※「オブジェクト」は時にクラスのことを指して使われることもある。→厳密に示したい場合は「オブジェクト」ではなく、「インスタンス」をもちいる。

インスタンス化：クラスからインスタンスを生成する行為のこと。


Javaプログラムの組成に必要なクラスたちは大きく分けて2種類。
・mainメソッドを含む1つの「神様クラス」
・複数の「登場人物のクラス」


クラス図（class diagram)
クラスの設計内容を上から「クラス名」「属性」「操作」の一覧として並べる書き方。UMLで定められている図の一つ。

UML（Unified Modeling Lanuage）
世界共通の設計書として定義

フィールド（field）
クラスブロック内に宣言された変数のこと。
フィールド宣言の先頭にfinalをつけると値を置き換えることのできない「定数フィールド」になる。
※定数フィールドは一目でそれとわかるように大文字で記述することが推奨されている。
例）final int LEVEL = 10;


this
自分自身のインスタンスを意味する変数
これは省略しても動くが、省略するとローカル変数や引数にも同じ名前がある場合、そちらが優先されてしまうなど予想外の動作になる可能性があるため省略しない

現段階では「オブジェクト指向に基づいて作るメソッドには普通はstaticをつけない」と覚える（14章で明かされるらしい）

メンバ（member）
フィールドとメソッドのこと

クラス、フィールド、メソッドの命名ルール
クラス名：名詞、単語の頭が大文字　例）Hero,MonsterInfo
フィールド名：名詞、最初以外の単語の頭が大文字　例）level,itemList
メソッド名：動詞、最初以外の単語の頭が大文字　例）attack,findWeakPoint

クラス型（class type）
クラスを定義することで利用可能になる型のこと

クラス型変数
Javaで扱う全ての変数は必ず何らかの型（type）を持っている
今まで使用してきた「整数を入れるためのint型」や「文字列を入れるためのString型」はJavaが標準で準備しており、いつでも使える型
それに加えて例えばHeroクラスを定義することで「Heroクラスから仮想世界に生み出されたインスタンスを入れることができるHero型」と
クラスを定義すれば、Javaで使える型の種類が増えていく
インスタンスは通常、クラス型変数に入れて利用する
→クラス型仮想世界に複数存在しうる同盟インスタンスの中から、特定の1つのインスタンスをプログラムとして識別するために用いる